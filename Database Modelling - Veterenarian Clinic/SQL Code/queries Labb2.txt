Queries:


1: Inequality: ser till att skriva ut endast olikheter

SELECT petName from pet where pet.gender != "M";

Visar alla djurnamn vars kön inte är Hane. Med andra ord visar namn på alla 
Hondjur.



2: LIKE: testar ifall operationen innehåller en specifik sträng eller inte.


select breedname from pet where customerID LIKE "%1";

visar alla rasnamn från relationen pet, vars ägare har ett customerID som slutar på "1"



3: SELECT på date column:



select str_to_date(date, '%m/%d/%y') AS Dates, petID from appointment order by Dates ASC;

selectar alla datum från appointment, och omvandlar de till riktiga datumformat med str_to_date (då de är i strängformat), vi döper kolumnen till Dates
och sedan så väljer vi även alla petIDs för respektive datum och ordnar allt baserat på datum i stigande ordning. 
Så resultatet blir alla datum för appointments och vilket petID som har en bokning då vid det datumet.




4: GROUP BY: grupperar ihop rader baserat attribut som raderna delar i en eller flera kolumner.


select customerID, count(*) As Pets from pet GROUP BY customerID;

Detta väljer alla customers i databasen och sedan räknar hur många pets varje customer har och grupperar/skriver ut svaret baserat på 
customersID - dvs att vi kommer få hur många pets som varje enskild customer har.



5: HAVING: Samma funktion som WHERE Fast för aggregate functions såsom GROUP BY & COUNT

select customerID, count(*) As Pets from pet GROUP BY customerID HAVING count(*) > 1;

Samma som ovan där man får hur många pets varje customer har men med filtreringen att bara skriva ut de customers som har mer än 1 pet.



6: Order by: ordnar/sorterar sökresultatet i antingen ascending (stigande) eller descending ordning,
By default så sorteras allt i Asc ordning vid order by om inget annat anges.

select employeeID, degree from employee order by employeeID DESC;

skriver ut employeeID och tillhörande degree från relationen employee, men ordnar resultatet
baserat på employee i fallande/descending ordning.



7: subquerry: är en operation som är nästad inom en annan operation.


SELECT petName FROM pet 
WHERE pet.customerID in 
(
	select customerID from petOwner
	WHERE petOwner.customerType = 1
);


skriv ut alla petnames från relationen med men med filtreringen att
petname.customerID måste matcha petOwner.CustomerID men med ytterligare filtrering att
petowner.CustomerID måste vara en customertype = 1, 
kortfattat alla petnames från pet vars customerID matchar petowners customerID och att petowners
customerID då måste vara av typen 1.
Man kan också se detta som: Visa alla djurnamn från pet som kommer från privatkunder/privatpersoner.




8: Correlated subquerry: en nästan operation som gör en jämförelse med den yttre
operationen för varje beräkning (till skillnad från en subkuerry som endast behöver göra beräkningen
en gång).


select breedname from pet where char_length(pet.breedname)>
(

select avg(char_length(pet.speciesname)) from pet

);



koden ovan visar alla breednames från pet, vars karaktärslängd är 
större än den genomsnittliga karaktärslängden av speciesname från pet,
så en jämförelse av längden för varje breedname och den genomsnittliga längden för
speciesname kommer att göras - dvs flera iterationer.





9:Count(*)


SELECT customerID, COUNT(*) AS pets from pet
WHERE customerID = "AC001";

väljer alla customer ID:s och räknar antalet gånger som varje customer ID syns i pet,
men välj endast att skriva ut antalet gånger som AC001 finns i pet.
Med andra ord, räkna antalet djur som customer AC001 har.




10: Ytterligare aggregate function SUM:


select sum(addressID), min(addressID), max(addressID) from address;

Visar summeringen av alla addressID, minsta värdet av alla addressID och maxvärdet av addressID
från address.


11: DELETE:


DELETE from pet where pet.breed = "Beagle";

Detta raderar hela raden från pet där djurrasen är = Beagle (vilket bara är en rad)

12: UPDATE:

UPDATE pet SET pet.petName = "Fa Fa" where pet.animalType = "Scorpion";

detta kommer att uppdatera djurnamnet för scorpion i relationen pet.

